const db = require('../db/connection');

// ◊©◊ú◊ô◊§◊™ ◊õ◊ú ◊°◊ï◊í◊ô ◊î◊°◊ô◊ï◊®◊ô◊ù ◊¢◊ù ◊™◊û◊ï◊†◊î
const getAllTours = (callback) => {
  const sql = `
    SELECT TourTypes.*, Images.ImageURL 
    FROM TourTypes
    JOIN Images ON TourTypes.ImageID = Images.ImageID;
  `;
  db.query(sql, (err, results) => {
    if (err) {
      console.error("üö® ◊©◊í◊ô◊ê◊î ◊ë◊©◊ú◊ô◊§◊™ ◊°◊ô◊ï◊®◊ô◊ù:", err.message);
      return callback(err);
    }
    callback(results);
  });
};

// ◊î◊ñ◊û◊†◊™ ◊°◊ô◊ï◊®
const bookTour = (data, callback) => {
  const { groupSize, groupName, tourHour, tourDate, notes, TourTypeID, CustomerID } = data;

  // üîç ◊ë◊ì◊ô◊ß◊™ ◊†◊™◊ï◊†◊ô◊ù ◊ó◊°◊®◊ô◊ù
  if (!groupSize || !groupName || !tourHour || !tourDate || !TourTypeID || !CustomerID) {
    console.error("‚ùå ◊†◊™◊ï◊†◊ô◊ù ◊ó◊°◊®◊ô◊ù:", { groupSize, groupName, tourHour, tourDate, TourTypeID, CustomerID });
    return callback('◊†◊™◊ï◊†◊ô◊ù ◊ó◊°◊®◊ô◊ù ◊ë◊î◊ñ◊û◊†◊î'); // ◊©◊í◊ô◊ê◊î ◊ê◊û◊ô◊™◊ô◊™ ‚Üí ◊™◊ï◊ó◊ñ◊® ◊¢◊ù status 400
  }

  // üß≠ ◊©◊ú◊ë 1: ◊ß◊®◊ô◊ê◊î ◊ú◊§◊®◊ï◊¶◊ì◊ï◊®◊î ◊©◊û◊ó◊ñ◊ô◊®◊î ◊û◊ì◊®◊ô◊ö ◊§◊†◊ï◊ô
  db.query(`CALL AssignGuideForTour(?, ?, @out_GuideID, @out_error);`, [tourDate, tourHour], (err1) => {
    if (err1) {
      console.error("‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊§◊®◊ï◊¶◊ì◊ï◊®◊î AssignGuideForTour:", err1);
      return callback('◊©◊í◊ô◊ê◊î ◊ë◊§◊®◊ï◊¶◊ì◊ï◊®◊î AssignGuideForTour'); // ◊©◊í◊ô◊ê◊î ◊ê◊û◊ô◊™◊ô◊™
    }

    // üßæ ◊©◊ú◊ë 2: ◊©◊ú◊ô◊§◊™ ◊û◊©◊™◊†◊ô ◊î◊§◊ú◊ò
    db.query(`SELECT @out_GuideID AS GuideID, @out_error AS Err;`, (err2, result) => {
      if (err2) {
        console.error("‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊©◊ú◊ô◊§◊™ ◊î◊§◊ú◊ò ◊û◊î◊§◊®◊ï◊¶◊ì◊ï◊®◊î:", err2);
        return callback('◊©◊í◊ô◊ê◊î ◊ë◊©◊ú◊ô◊§◊™ ◊î◊§◊ú◊ò ◊û◊î◊§◊®◊ï◊¶◊ì◊ï◊®◊î'); // ◊©◊í◊ô◊ê◊î ◊ê◊û◊ô◊™◊ô◊™
      }

      const out = result?.[0];

      if (!out) {
        console.error("‚ö†Ô∏è ◊ú◊ê ◊î◊™◊ß◊ë◊ú◊î ◊™◊©◊ï◊ë◊î ◊û◊î◊§◊®◊ï◊¶◊ì◊ï◊®◊î AssignGuideForTour");
        return callback('◊©◊í◊ô◊ê◊î ◊§◊†◊ô◊û◊ô◊™: ◊ú◊ê ◊î◊™◊ß◊ë◊ú◊î ◊™◊©◊ï◊ë◊î ◊û◊î◊§◊®◊ï◊¶◊ì◊ï◊®◊î'); // ◊©◊í◊ô◊ê◊î ◊ê◊û◊ô◊™◊ô◊™
      }

      if (out.Err) {
        console.warn("‚ö†Ô∏è ◊©◊í◊ô◊ê◊™ ◊û◊ì◊®◊ô◊ö:", out.Err);
        return callback({ type: 'logic', message: out.Err }); // ‚ö†Ô∏è ◊©◊í◊ô◊ê◊î ◊ú◊ï◊í◊ô◊™ ‚Äì ◊™◊ï◊ó◊ñ◊® ◊¢◊ù status 200
      }

      const GuideID = out.GuideID;

      if (!GuideID) {
        console.error("‚ùå GuideID ◊®◊ô◊ß ◊ú◊û◊®◊ï◊™ ◊©◊ê◊ô◊ü ◊©◊í◊ô◊ê◊î ◊ë◊§◊®◊ï◊¶◊ì◊ï◊®◊î");
        return callback('◊©◊í◊ô◊ê◊î ◊§◊†◊ô◊û◊ô◊™: ◊ú◊ê ◊†◊ë◊ó◊® ◊û◊ì◊®◊ô◊ö ◊ú◊û◊®◊ï◊™ ◊©◊ê◊ô◊ü ◊©◊í◊ô◊ê◊î ◊ë◊§◊®◊ï◊¶◊ì◊ï◊®◊î'); // ◊©◊í◊ô◊ê◊î ◊ê◊û◊ô◊™◊ô◊™
      }

      console.log("üß≠ ◊û◊ì◊®◊ô◊ö ◊©◊†◊ë◊ó◊®:", GuideID);

      // ‚úÖ ◊©◊ú◊ë 3: ◊î◊õ◊†◊°◊™ ◊î◊î◊ñ◊û◊†◊î ◊ú◊ò◊ë◊ú◊™ Tours
      const sqlInsert = `
        INSERT INTO Tours 
        (groupSize, groupName, tourHour, tourDate, notes, TourTypeID, CustomerID, GuideID) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?);
      `;

      db.query(
        sqlInsert,
        [groupSize, groupName, tourHour, tourDate, notes, TourTypeID, CustomerID, GuideID],
        (err3, resultInsert) => {
          if (err3) {
            console.error("‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊î◊ñ◊û◊†◊™ ◊°◊ô◊ï◊®:", err3.message, err3.sqlMessage);
            return callback('◊©◊í◊ô◊ê◊î ◊ë◊î◊ñ◊û◊†◊™ ◊°◊ô◊ï◊®. ◊ê◊†◊ê ◊†◊°◊î ◊©◊ï◊ë ◊û◊ê◊ï◊ó◊® ◊ô◊ï◊™◊®.'); // ◊©◊í◊ô◊ê◊î ◊ê◊û◊ô◊™◊ô◊™
          }

          callback(null, {
            bookingId: resultInsert.insertId,
            message: "‚úÖ ◊î◊°◊ô◊ï◊® ◊î◊ï◊ñ◊û◊ü ◊ë◊î◊¶◊ú◊ó◊î!"
          });
        }
      );
    });
  });
};

const getToursByGuide = (guideID, callback) => {
  const sql = `
  SELECT Tours.*, TourTypes.TourTypeName, Images.ImageURL
  FROM Tours
  JOIN TourTypes ON Tours.TourTypeID = TourTypes.TourTypeID
  JOIN Images ON TourTypes.ImageID = Images.ImageID
  WHERE GuideID = ?;
`;

  db.query(sql, [guideID], (err, results) => {
    if (err) {
      console.error("‚ùå ◊©◊í◊ô◊ê◊î ◊ë◊©◊ú◊ô◊§◊™ ◊°◊ô◊ï◊®◊ô◊ù ◊ú◊û◊ì◊®◊ô◊ö:", err.message);
      return callback(err);
    }
    callback(null, results);
  });
};
const updateTourFeedback = (data, callback) => {
  const {TourID,GuideFeedback  } = data;
      const sql = `
        UPDATE Tours SET GuideFeedback=? WHERE TourID=?
      `;
      db.query(sql,[GuideFeedback,TourID ],callback);
    } ;
    const addTourType = (TourTypeName,DescriptionT,PricePerPerson, ImageURL, callback) => {
      const sqlImage = `INSERT INTO Images (ImageURL) VALUES (?)`;
      db.query(sqlImage, [ImageURL], (err, result) => {
        if (err) {
          console.error("‚ùå Error inserting into Images:", err);
          return callback(err);
        }
        const ImageID = result.insertId;
        const sqlItems = `INSERT INTO tourtypes (TourTypeName,DescriptionT,PricePerPerson, ImageID) VALUES (?,?,?,?)`;
        db.query(sqlItems, [TourTypeName,DescriptionT,PricePerPerson,ImageID], (err2, result2) => {
          if (err2) {
            console.error("‚ùå Error inserting into tourtypes:", err2);
            return callback(err2);
          }
          callback(null, result2.insertId);
        });
      });
    };
module.exports = { getAllTours, bookTour,getToursByGuide,updateTourFeedback,addTourType };
